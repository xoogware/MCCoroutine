import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

buildscript {
    repositories {
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'org.jetbrains.kotlin', name: 'kotlin-gradle-plugin', version: '1.9.25'
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:1.9.20"
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.9.25'
}

allprojects {
    apply plugin: 'org.jetbrains.dokka'
}

repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
}

tasks.register("printVersion") {
    println(this.subprojects.getAt(0).version)
}

subprojects {
    group 'com.github.shynixn.mccoroutine'
    version '2.19.0'

    sourceCompatibility = 1.8

    apply plugin: 'kotlin'
    apply plugin: 'signing'
    apply plugin: 'maven-publish'
    apply plugin: 'java-library'

    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }

    test {
        useJUnitPlatform()
        testLogging.showStandardStreams = true
        failFast = true

        testLogging {
            events(TestLogEvent.FAILED, TestLogEvent.PASSED, TestLogEvent.SKIPPED, TestLogEvent.STARTED)
            displayGranularity = 0
            showExceptions = true
            showCauses = true
            showStackTraces = true
            exceptionFormat = TestExceptionFormat.FULL
        }
    }

    task sourcesJar(type: Jar) {
        from sourceSets.main.allSource
        getArchiveClassifier().set('sources')
    }

    tasks.named("dokkaHtml") {
        outputDirectory = file("$buildDir/javadoc")
    }

    task javadocJar(type: Jar, dependsOn: dokkaHtml) {
        from dokkaHtml.outputDirectory
        getArchiveClassifier().set('javadoc')
    }

    publishing {
        publications {
            gpr(MavenPublication) {
                from(components.java)
            }
        }
        repositories {
            maven {
                url = "https://maven.pkg.github.com/xoogware/mccoroutine"

                credentials {
                    username = project.hasProperty("gpr.user") ? project.findProperty("gpr.user") : System.getenv("GITHUB_ACTOR")
                    password = project.hasProperty("gpr.key") ? project.findProperty("gpr.key") : System.getenv("GITHUB_TOKEN")
                }
            }
        }
    }

    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()
    }

    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
        testImplementation 'org.mockito:mockito-core:2.23.0'
        testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
    }
}

gradle.taskGraph.whenReady { taskGraph ->
    if (project.findProperty("signing.keyId") == null) {
        ext."signing.keyId" = System.getenv('SIGNING_KEY_ID')
        ext."signing.password" = System.getenv('SIGNING_KEY_PASSWORD')
        ext."signing.secretKeyRingFile" = System.getenv('SIGNING_KEY_FILE')
    }
}

task generateBukkitJavaDocPages(type: org.jetbrains.dokka.gradle.DokkaTask) {
    dokkaSourceSets {
        named("main") {
            outputDirectory = file("docs/apidocs")
            sourceRoots.from(file("mccoroutine-bukkit-api/src/main/java"))
        }
    }
}

task generateSpongeJavaDocPages(type: org.jetbrains.dokka.gradle.DokkaTask) {
    dokkaSourceSets {
        named("main") {
            outputDirectory = file("docs/apidocs")
            sourceRoots.from(file("mccoroutine-sponge-api/src/main/java"))
        }
    }
}

task generateBungeeCordJavaDocPages(type: org.jetbrains.dokka.gradle.DokkaTask) {
    dokkaSourceSets {
        named("main") {
            outputDirectory = file("docs/apidocs")
            sourceRoots.from(file("mccoroutine-bungeecord-api/src/main/java"))
        }
    }
}

task generateVelocityJavaDocPages(type: org.jetbrains.dokka.gradle.DokkaTask) {
    dokkaSourceSets {
        named("main") {
            outputDirectory = file("docs/apidocs")
            sourceRoots.from(file("mccoroutine-velocity-api/src/main/java"))
        }
    }
}

task generateMinestomJavaDocPages(type: org.jetbrains.dokka.gradle.DokkaTask) {
    dokkaSourceSets {
        named("main") {
            outputDirectory = file("docs/apidocs")
            sourceRoots.from(file("mccoroutine-minestom-api/src/main/java"))
        }
    }
}

task generateFabricJavaDocPages(type: org.jetbrains.dokka.gradle.DokkaTask) {
    dokkaSourceSets {
        named("main") {
            outputDirectory = file("docs/apidocs")
            sourceRoots.from(file("mccoroutine-fabric-api/src/main/java"))
        }
    }
}
